#!/usr/bin/python
import ldap
import ldap.filter
import grp
import os
import tempfile
import sys
import subprocess
import shutil
try:
    import hashlib as md5
except:
    import md5

def get_md5sum_hash():
    dir = "/etc/sshd/users/"
    user_md5sums = {}
    file_list = os.listdir (dir)
    for file in file_list:
        path = os.path.join(dir, file, "authorized_keys")
        if os.path.isfile (path):
            f = open (path)
            str = f.read ()
            f.close ()
            m = md5.md5(str)
            user_md5sums [file] = m.hexdigest ()
    return user_md5sums

GNOMEGIT=0
TRANSLATION_USER=0
MANGO=0
RRSYNC=0
## first you must open a connection to the server
try:
    l = ldap.open("ldap-back")
    l.simple_bind("cn=Manager,dc=gnome,dc=org")
except ldap.LDAPError, e:
    print e
    sys.exit(1)


def get_uids_from_group(group):
    filter = ldap.filter.filter_format("(cn=%s)", (group, ))
    try:
        ldap_result_id = l.search ("ou=groups,dc=gnome,dc=org",
                                   ldap.SCOPE_SUBTREE, filter, None)
        while 1:
            result_type, group_data = l.result(ldap_result_id, 0)
            if (group_data == []):
                break
            else:
                group_info = group_data[0][1]
                return group_info.get('memberUid', [])
    except ldap.LDAPError, e:
        print e
        sys.exit(1)

    return []

def get_uids_from_wheel():
    try:
        wheelinfo = grp.getgrnam ('wheel')
    except KeyError:
        wheelinfo = grp.getgrnam ('admin')

    people = wheelinfo[3]
    return filter (lambda x: x != 'root', people)

def get_uids_from_sysadmin():
    # XXX 
    try:
        people = grp.getgrnam ('sysadmin')[3]
    except KeyError:
        # Server doesn't have an LDAP connection -- probably the label server
        people = get_uids_from_group('sysadmin')

    return filter (lambda x: x != 'root' and x != 'sysadmin', people)

def lookup_user_info(uids, user_data):
    format = '(uid=%s)' * len(uids)
    filter = ldap.filter.filter_format(format, list(uids))
    if len(uids) > 0:
        filter = '(|%s)' % filter
    filter = '(&%s(authorizedKey=*))' % filter
    try:
        persona_data = l.search_s ("ou=people,dc=gnome,dc=org",
                                   ldap.SCOPE_SUBTREE, filter, None)
    except ldap.LDAPError, e:
        print e
        sys.exit(1)

    if not len(persona_data):
        return None

    for dn, person_info in persona_data:
        key_list = person_info['authorizedKey']
        key_list.sort ()

        uid = person_info['uid'][0]
        user_data[uid] = {
            'uid': uid,
            'authorizedKey': key_list,
            'uidNumber': person_info['uidNumber'][0],
            'gidNumber': person_info['gidNumber'][0],
            'vcsOnly': 0
        }

    return user_data

def build_user_hash(group_list):
    users = set()
    user_data = {}
    gnomevcs_users = set()
    global GNOMEGIT
    global TRANSLATION_USER
    global MANGO
    global RRSYNC

    # get a list of all the users.  Keep them in a hashtable to avoid duplicates
    wheel = set(get_uids_from_wheel())
    sysadmin = set(get_uids_from_sysadmin())
    print_user_list('Sysadmins not in wheel', sysadmin - wheel)
    print_user_list('Ex-sysadmins to be removed from wheel', wheel - sysadmin)
    users.update(wheel)
    users.update(sysadmin)
    for group in group_list:
        users.update(get_uids_from_group(group))
    if GNOMEGIT or MANGO:
        gnomevcs_users = set(get_uids_from_group ('gnomecvs') + get_uids_from_group ('gnomevcs')) - users
    if RRSYNC: # XXX - HACK TO TEST MASTER-VM SETUP
        gnomevcs_users = set(get_uids_from_group ('testuser')) - users
    if TRANSLATION_USER:
        gnomevcs_users.update(['translations'])

    # look up their keys (if we have them)
    lookup_user_info(users, user_data)

    if len(gnomevcs_users):
        lookup_user_info(gnomevcs_users, user_data)
        for uid in gnomevcs_users:
            if uid in user_data:
                user_data[uid]['vcsOnly'] = 1

    return user_data.values()

# we don't expect any errors with this so we let any that occur go up
# to the top so that cron mails them out.
def remove_directory (dir):
    assert os.path.isdir (dir)
    file_list = os.listdir (dir)

    for file in file_list:
        path = os.path.join(dir, file)
        if os.path.isfile (path):
            os.remove (path)
        elif os.path.isdir (path):
            remove_directory (path)
    os.rmdir (dir)

def create_directory_structure (user_list):
    global GNOMEGIT
    global TRANSLATION_USER
    global MANGO
    global RRSYNC

    base_directory_name = tempfile.mktemp ('-sshd')
    sshd_directory_name = base_directory_name + "/sshd"
    users_directory_name = sshd_directory_name + "/users"
    os.mkdir (base_directory_name, 0700)

    try:
        os.mkdir (sshd_directory_name, 0711)
        os.mkdir (users_directory_name, 0711)

        # make a users dir
        for user in user_list:
            user_dir_name = users_directory_name + "/" + user['uid']
            authorized_keys_file = user_dir_name + "/authorized_keys"
            os.mkdir (user_dir_name, 0700)
            os.chown (user_dir_name, int(user['uidNumber']), int (user['gidNumber']))
            file = open (authorized_keys_file, "w")
            for key in user['authorizedKey']:
                if user['vcsOnly']:
                    if TRANSLATION_USER and user['uid'] == "translations":
                        # For damned-lies to commit translations directly to git
                        file.write ('command="/home/admin/bin/run-git-or-special-cmd",no-pty,no-port-forwarding,host="91.189.93.2" ')
                    elif MANGO:
                        file.write ("command=\"/home/admin/bin/run-mango-special-cmd\",no-pty,no-port-forwarding ")
                    elif RRSYNC:
                        file.write ("command=\"run-rrsync-or-special-cmd\",no-user-rc,no-pty,no-port-forwarding ")
                    else: # GNOMEGIT
                        file.write ("command=\"/home/admin/bin/run-git-or-special-cmd\",no-pty,no-port-forwarding ")
                file.write (key)
                file.write ("\n")
            file.close()
            os.chmod (authorized_keys_file, 0700)
            os.chown (authorized_keys_file, int (user['uidNumber']), int (user['gidNumber']))

        # We special case root
        if os.path.isfile ("/root/.ssh/authorized_keys"):
            user_dir_name = users_directory_name + "/root"
            authorized_keys_file = user_dir_name + "/authorized_keys"
            os.mkdir (user_dir_name, 0700)
            os.chown (user_dir_name, 0, 0)
            shutil.copy2('/root/.ssh/authorized_keys', authorized_keys_file)

    except Exception, e:
        remove_directory (base_directory_name)
        raise
    return base_directory_name


def print_user_list (description, user_list):
    if not user_list:
        return

    user_len = len (user_list)
    if user_len == 1:
        print description + " %d user:" % user_len
    else:
        print description + " %d users:" % user_len
    for user in sorted(user_list):
        print "\t%s" % user
    print

def print_comparison (initial_user_hash, post_user_hash):
    removed_users = []
    new_users = []
    changed_users = []
    # go through the list of initial
    for user, hash in initial_user_hash.iteritems():
        try:
            post_hash = post_user_hash [user]
            if post_hash != hash:
                changed_users.append (user)
            del post_user_hash [user]
        except KeyError:
            removed_users.append (user)
    for user in post_user_hash.iterkeys():
        new_users.append (user)

    print_user_list ("Added", (new_users))
    print_user_list ("Removed", (removed_users))
    print_user_list ("Changed", (changed_users))

if __name__ == '__main__':
    group_list = sys.argv[1:]
    if '--gnomegit' in group_list:
        GNOMEGIT=1
        group_list = filter (lambda x: x != '--gnomegit', group_list)
    if '--rrsync' in group_list:
        RRSYNC=1
        group_list = filter (lambda x: x != '--rrsync', group_list)
    if '--mango' in group_list:
        MANGO=1
        group_list = filter (lambda x: x != '--mango', group_list)
    if '--translation-user' in group_list:
        TRANSLATION_USER=1
        group_list = filter (lambda x: x != '--translation-user', group_list)

    if (GNOMEGIT + MANGO + RRSYNC) > 1:
        print "--gnomegit, --mango and --rsync are exclusive"
        sys.exit(1)

    user_list = build_user_hash (group_list)
    if not len(user_list):
        print "ERROR: No users to create! Likely empty LDAP directory!!"
        sys.exit(1)
    base_directory_name = create_directory_structure (user_list)

    initial_user_hash = get_md5sum_hash ()
    status = subprocess.call(['rsync', '-aq', '--delete', '%s/sshd/' % base_directory_name, '/etc/sshd/'])
    if status != 0:
        print ("Error in rsync of files:")
        try:
            remove_directory (base_directory_name)
        except IOError, e:
            print "Unable to remove directory %s\n%s" % (base_directory_name, str(e))
        sys.exit (status)
    post_user_hash = get_md5sum_hash ()
    remove_directory (base_directory_name)
    print_comparison (initial_user_hash, post_user_hash)
