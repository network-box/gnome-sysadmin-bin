#!/usr/bin/env python

# This script should be run with the output written to /git/cgit.repositories, which
# is included from /etc/cgitrc

import os
import re

# This is what GIT writes by default, we replace it with something better
NO_DESCRIPTION = 'Unnamed repository; edit this file to name it for gitweb.'

grouplist = ('Administration Tools', 'Bindings', 'Deprecated', 'Desktop', 'Development Tools',
             'Infrastructure', 'Platform', 'Productivity Tools', 'Other')
groupmap = {
    'admin': 'Administration Tools',
    'bindings': 'Bindings',
    'deprecated': 'Deprecated',
    'desktop': 'Desktop',
    'development': 'Development Tools',
    'infrastructure': 'Infrastructure',
    'platform': 'Platform',
    'productivity': 'Productivity Tools'
    }
groups = {}
for group in grouplist:
    groups[group] = []

# Sort alphabetically by name
def sort_repos(a, b):
    return cmp(a[1].lower(), b[1].lower())

def list_repos (paths):
    for path in paths:
        if not os.path.isdir(path):
            continue
        for repo in os.listdir(path):
            repopath = os.path.join (path, repo)
            # We check for ./refs to avoid non-git repository subdirs
            if not os.path.isdir(os.path.join(repopath, 'refs')):
                continue
            shortname = re.sub('/git/', '', repopath)
            shortname = re.sub('/srv/', '', shortname)
            shortname = re.sub('\.git$', '', shortname)
            shortname = re.sub('/home/', '~', shortname)
            pending = ''
            if os.path.isfile(os.path.join(repopath, 'pending')):
                pending = '[PENDING] '

            desc_file = os.path.join(repopath, 'description')
            desc = ''
            if os.path.isfile(desc_file):
                desc = open(desc_file).readline().strip()
                if desc == '' or desc == NO_DESCRIPTION:
                    desc = "Please create %s.doap (see http://live.gnome.org/Git/FAQ)" % shortname
            desc = pending + desc
                
            group_file = os.path.join(repopath, 'gnome_group')
            group = None
            if os.path.isfile(group_file):
                group = open(group_file).readline().strip()
            group = groupmap.get(group, 'Other')

            groups[group].append ((shortname, shortname, desc, repopath))

    for group in grouplist:
        for repo in sorted(groups[group], sort_repos):
            print 'repo.group=%s' % group
            print 'repo.url=%s' % repo[0]
            print 'repo.name=%s' % repo[1]
            print 'repo.desc=%s' % repo[2]
            print 'repo.path=%s' % repo[3]
            print

list_repos (('/git', '/git/preview'))
