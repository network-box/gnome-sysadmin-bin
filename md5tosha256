#!/usr/bin/python

import os
import os.path
import subprocess
import grp

def walk_dir(top, old, new):
    count = 0
    gid = grp.getgrnam('ftpadmin')[2]

    for root, dirs, files in os.walk(top, topdown=False):
        oldfiles = []
        for ext in old['ext']:
            oldfiles.extend([(file, file[:-len(ext)] + new['ext']) for file in files if file.endswith(ext) and not os.path.exists(file[:-len(ext)] + new['ext'])])

        for oldfile, newfile in oldfiles:
            oldfile2 = os.path.join(root, oldfile)
            newfile2 = os.path.join(root, newfile)

            if os.path.islink(oldfile2):
                print "ERROR: Skipping symbolic link: %s" % oldfile2
                continue

            count += 1
            # Verify integrity existing md5sum file
            retcode = subprocess.call([old['prog'], '-c', '--status', '--', oldfile2], cwd=root)
            if retcode != 0:
                print "ERROR: Validating existing hash. File: %s, retcode: %s" % (oldfile2, retcode)
                continue

            hashfiles = [line.split(" ", 1)[1].lstrip("* ") for line in open(oldfile2, "r").read().splitlines()]
            retcode = subprocess.call([new['prog'], '--'] + hashfiles, cwd=root, stdout=open(newfile2, "w"))
            if retcode != 0:
                print "ERROR: Creating new hash. File: %s, retcode: %s" % (newfile2, retcode)
                if os.path.exists(newfile2): os.remove(newfile2)
                continue

            print root, oldfile2
            stat = os.stat(oldfile2)
            os.utime(newfile2, (stat.st_atime, stat.st_mtime))
            os.chown(newfile2, -1, gid)



if __name__ == "__main__":
    old = {
        'prog': 'md5sum',
        'ext': set(('.md5sum', '.md5'))
    }
    new = {
        'prog': 'sha256sum',
        'ext': '.sha256sum'
    }
    killpaths = set((
        '/ftp/pub/GNOME/stable/sources',
        '/ftp/pub/GNOME/pre-gnome2/sources',
    ))
    walk_dir("/ftp/pub/GNOME", old, new)
