#!/usr/bin/python
import sys
from snack import *
import ldap
import ldap.modlist

# set the ldap_password variable
execfile ("/home/admin/secret/ldap")

class UserInfo:
    def __init__ (self):
        self.uid = ''
        self.givenName = ''
        self.sn = ''
        self.mail = ''
        self.description = ''
        self.sshKey = ''
        self.gnomecvs = 0
        self.ftpadmin = 0
        self.gnomeweb = 0
        self.bugzilla = 0
        self.numericId = 0

    def valid_user (self, l):
        # check to make sure that the uid is okay
        res = l.search_s ('ou=people,dc=gnome,dc=org', ldap.SCOPE_SUBTREE, "(uid=%s)" % self.uid, ["uid"])
        if res == []:
            return 1
        else:
            return 0

    def user_can_login (self):
        if self.ftpadmin or self.gnomeweb or self.bugzilla:
            return 1
        return 0

    # Gets a new uid.  This really should be atomic, and use a uid/gid
    # pool or something.  Additionally, it's not very smart as I can't
    # figure out how to get ldap to do numeric ranged searches
    def generate_new_id (self, l):
        if not self.numericId == 0:
            return
        uid_list = []
        gid_list = []
        START_ID = 7000
        res_list = l.search_s ('ou=people,dc=gnome,dc=org', ldap.SCOPE_SUBTREE, "(objectClass=posixAccount)", ["uidNumber", "gidNumber"])
        for res in res_list:
            uidNumber = int (res[1]['uidNumber'][0])
            if uidNumber >= START_ID:
                uid_list.append (uidNumber)
            gidNumber = int (res[1]['gidNumber'][0])
            if gidNumber >= START_ID:
                gid_list.append (gidNumber)

        for i in xrange (START_ID, START_ID + 1000):
            if i not in uid_list and i not in gid_list:
                self.numericId = i
                return
        assert numericId != 0

        
    def create_user (self, l):
        self.generate_new_id (l)
        mod_dict = {}
        mod_dict['objectClass'] = ['inetOrgPerson', 'posixAccount', 'pubkeyAuthenticationUser']
        mod_dict['authorizedKey'] = [self.sshKey]
        mod_dict['uid'] = [self.uid]
        mod_dict['loginShell'] = ['/bin/bash']
        if self.user_can_login ():
            mod_dict['homeDirectory'] = ['/home/users/' + self.uid]
        else:
            mod_dict['homeDirectory'] = ['/']
        mod_dict['uidNumber'] = [str (self.numericId)]
        mod_dict['gidNumber'] = [str (self.numericId)]
        mod_dict['cn'] = [self.givenName + ' ' + self.sn]
        mod_dict['sn'] = [self.sn]
        mod_dict['givenName'] = [self.givenName]
        mod_dict['mail'] = [self.mail]
        if self.description != '':
            mod_dict['description'] = [self.description]
        modlist = ldap.modlist.addModlist (mod_dict)
        dn = 'uid=%s,ou=people,dc=gnome,dc=org' % self.uid
        print l.add_s(dn, modlist)

    def create_group (self, l):
        self.generate_new_id (l)
        mod_dict = {}
        mod_dict['objectClass'] = ['posixGroup']
        mod_dict['cn'] = [self.uid]
        mod_dict['gidNumber'] = [str (self.numericId)]
        mod_dict['memberUid'] = [self.uid]
        modlist = ldap.modlist.addModlist (mod_dict)
        dn = 'cn=%s,ou=groups,dc=gnome,dc=org' % self.uid
        l.add_s(dn, modlist)


    def update_other_groups(self, l):
        modlist = [(ldap.MOD_ADD, 'memberUid', self.uid)]
        if self.gnomecvs:
            dn = 'cn=gnomecvs,ou=groups,dc=gnome,dc=org'
            l.modify_s(dn, modlist)
        if self.ftpadmin:
            dn = 'cn=ftpadmin,ou=groups,dc=gnome,dc=org'
            l.modify_s(dn, modlist)
        if self.gnomeweb:
            dn = 'cn=gnomeweb,ou=groups,dc=gnome,dc=org'
            l.modify_s(dn, modlist)
        if self.bugzilla:
            dn = 'cn=bugzilla,ou=groups,dc=gnome,dc=org'
            l.modify_s(dn, modlist)

    def commit_to_ldap (self, l):
        self.create_user (l)
        self.create_group (l)
        self.update_other_groups (l)

def initialize_ldap ():
    try:
        l = ldap.open (ldap_server)
        l.simple_bind ("cn=Manager,dc=gnome,dc=org", ldap_password)
        l.protocol_version = ldap.VERSION3
    except ldap.LDAPError, e:
        return None
    return l

# simple test function to return a testuser
def get_test_user_information ():
    user = UserInfo()
    user.uid = 'testguy'
    user.sn = 'Guy'
    user.givenName = 'Test'
    user.mail = 'test@guy.net'
    user.sshKey = 'ssh-dss 12345 test@guy.net'
    user.gnomeweb = 1
    return user

def get_user_information (screen):
    result = EntryWindow (screen, 'New User', 'Primary account information',
                          ['uid', 'First Name', 'Surname', 'Email Address', 'Description'],
                          entryWidth=40,
                          buttons=['Cancel', 'Next'])
    if result[0] == 'cancel':
        return None

    user = UserInfo ()
    user.uid = result[1][0]
    user.givenName = result[1][1]
    user.sn = result[1][2]
    user.mail = result[1][3]
    user.description = result[1][4]
    if user.uid == '' or user.givenName == '' or user.sn == '':
        raise 'ValueError', "Incomplete field"

    g = GridForm (screen, "ssh public key", 1, 2)
    t = Entry (40)
    g.add (t, 0, 0)
    bb = ButtonBar(screen, (("Cancel", "cancel"), ("Next", "next")))
    g.add(bb, 0, 1, growx = 1)
    result = g.runOnce()
    if bb.buttonPressed (result) == 'cancel':
        return None
    user.sshKey = t.value()
    if user.sshKey == '':
        raise 'ValueError', "Unable to create a user without an SSH key"

    g = GridForm (screen, "Permissions", 1, 5)
    cvs_cb = Checkbox ("CVS access")
    g.add (cvs_cb, 0, 0, anchorLeft=1)
    ftp_cb = Checkbox ("ftp upload access")
    g.add (ftp_cb, 0, 1, anchorLeft=1)
    web_cb = Checkbox ("webadmin access")
    g.add (web_cb, 0, 2, anchorLeft=1)
    bug_cb = Checkbox ("bugzilla access")
    g.add (web_cb, 0, 3, anchorLeft=1)
    bb = ButtonBar(screen, (("Cancel", "cancel"), ("Create User", "create")))
    g.add(bb, 0, 4, growx = 1)
    result = g.runOnce ()
    if bb.buttonPressed (result) == 'cancel':
        return None
    user.gnomecvs = cvs_cb.selected ()
    user.ftpadmin = ftp_cb.selected ()
    user.gnomeweb = web_cb.selected ()
    user.bugzilla = bug_cb.selected ()
    return user

screen = SnackScreen ()
try:
    user = get_user_information (screen)
    #user = get_test_user_information ()
except 'ValueError', str:
    ButtonChoiceWindow (screen, "Error creating user",
                        str, buttons=['Ok'])
    screen.finish()
    sys.exit (0)
screen.finish()

if user == None:
    sys.exit (0)

l = initialize_ldap ()
if l == None:
    sys.exit (0)

if not user.valid_user (l):
    print 'A user called %s already exists' % user.uid
    sys.exit (0)

user.commit_to_ldap (l)
